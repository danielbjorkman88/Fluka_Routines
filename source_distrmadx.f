*$ CREATE SOURCE.FOR
*COPY SOURCE
*
*=== source ===========================================================*
*
      SUBROUTINE SOURCE ( NOMORE )

      INCLUDE '(DBLPRC)'
      INCLUDE '(DIMPAR)'
      INCLUDE '(IOUNIT)'
*
*----------------------------------------------------------------------*
*                                                                      *
*     Copyright (C) 1990-2012      by    Alfredo Ferrari & Paola Sala  *
*     All Rights Reserved.                                             *
*                                                                      *
*                                                                      *
*     New source for FLUKA9x-FLUKA20xy:                                *
*                                                                      *
*     Created on 07 January 1990   by    Alfredo Ferrari & Paola Sala  *
*                                                   Infn - Milan       *
*                                                                      *
*     Last change on  29-Sep-12    by    Alfredo Ferrari               *
*                                                                      *
*  This is just an example of a possible user written source routine.  *
*  note that the beam card still has some meaning - in the scoring the *
*  maximum momentum used in deciding the binning is taken from the     *
*  beam momentum.  Other beam card parameters are obsolete.            *
*                                                                      *
*       Output variables:                                              *
*                                                                      *
*              Nomore = if > 0 the run will be terminated              *
*                                                                      *
*----------------------------------------------------------------------*
*
*     @@@@@@@@@@@                                            @@@@@@@@@@@
*     @@@                                                            @@@
*     @@@   Source routine for loading particle distributions        @@@
*     @@@   pre-generated by tracking codes like Sixtrack            @@@
*     @@@   A. Lechner, 20/07/2012                                   @@@
*     @@@                                                            @@@
*     @@@   Last change by F. Cerutti on 25-Sep-17                   @@@
*     @@@                                                            @@@
*     @@@@@@@@@@@                                            @@@@@@@@@@@
*
*
      INCLUDE '(BEAMCM)'
      INCLUDE '(FHEAVY)'
      INCLUDE '(GENSTK)'
      INCLUDE '(FLKSTK)'
      INCLUDE '(IOIOCM)'
      INCLUDE '(LTCLCM)'
      INCLUDE '(PAPROP)'
      INCLUDE '(SOURCM)'
      INCLUDE '(SUMCOU)'
      INCLUDE '(PAREVT)'
      INCLUDE '(FLKMAT)'
      INCLUDE '(FLKCMP)'
      INCLUDE 'EXTRST.inc'
*
      INTEGER NIN
      PARAMETER (NINMAX = 11000000) ! Max. # of particles (lines) in file
      DIMENSION IIN(NINMAX)
      DIMENSION XIN(NINMAX), YIN(NINMAX), ZIN(NINMAX)
      DIMENSION UIN(NINMAX), VIN(NINMAX), WIN(NINMAX)
      DIMENSION PBIN(NINMAX)
      SAVE NIN, XIN, YIN, ZIN, UIN, VIN, WIN, PBIN
*
      CHARACTER*250 LINE
*
      LOGICAL LFIRST, LSVERB, LFORCE, LENOLD
*
      DIMENSION SUMINX (300)
      SAVE SUMINX
*
      SAVE LFIRST, LSVERB, LFORCE
      DATA LFIRST / .TRUE. /
      DATA LSVERB / .FALSE. /
      DATA LFORCE / .FALSE. /
*
*======================================================================*
*                                                                      *
*                 BASIC VERSION                                        *
*                                                                      *
*======================================================================*
      NOMORE = 0
*  +-------------------------------------------------------------------*
*  |  First call initializations:
      IF ( LFIRST ) THEN
*  |  *** The following 3 cards are mandatory ***
         TKESUM = ZERZER
         LFIRST = .FALSE.
         LUSSRC = .TRUE.
         IF( ABS(WHASOU(2)).GT.ANGLGB ) LFORCE = .TRUE. 
         IF( ABS(WHASOU(5)).GT.ANGLGB ) LSVERB = .TRUE. 
         IF( ABS(WHASOU(3)).GT.ANGLGB ) THEN
            ZAUX = WHASOU(3)
         ELSE
            ZAUX = ZERZER
         END IF
*  |  *** User initialization ***
*  |  @@@@@@@@@@@                                            @@@@@@@@@@@
*  |  @@@@@@@@@@@                                            @@@@@@@@@@@
*  |  @@@@@@@@@@@                                            @@@@@@@@@@@
*  |  @@@                                                            @@@
*  |  @@@ I. Reading particle distribution                           @@@
*  |  @@@                                                            @@@
         WRITE( LUNOUT, * ) "# ### Particle distribution ###"
         WRITE( LUNOUT, * ) "#"
         WRITE( LUNOUT, * ) "# Primary particle ID = ",IJBEAM
         WRITE( LUNOUT, * ) "#"
         WRITE( LUNOUT, * ) "# z position (cm) = ",ZAUX
*  |  @@@                                                            @@@
*  |  @@@ I.A. Getting file name from SOURCE card in input file      @@@
*  |  @@@                                                            @@@
         ISP = INDEX(SDUSOU," ")-1
         IF (ISP.GT.0) THEN
              LINE = SDUSOU(1:INDEX(SDUSOU," ")-1)//".dat"
         ELSE
              LINE = SDUSOU//".dat"
         ENDIF
         IF ( LSVERB ) WRITE( 84,* ) 
     +       "# Initialization file = "//LINE(1:LEN_TRIM(LINE))
*  |  @@@                                                            @@@
*  |  @@@ I.B. Opening file                                          @@@
*  |  @@@                                                            @@@
         WRITE( LUNOUT,* ) 'SOURCE: Reading initialization file '//LINE
         CALL OAUXFI(LINE,LUNRDB,'OLD',IERR)
         IF ( IERR .GT. 0 )
     +       CALL FLABRT('SOURCE','Error opening source file '//LINE)
*  |  @@@                                                            @@@
*  |  @@@ I.C. Reading and converting particle distribution data     @@@
*  |  @@@      and storing data in arrays                            @@@
*  |  @@@                                                            @@@
*  |  @@@ Initialiation of variables                                 @@@
         NIN = 0
         XSUM = ZERZER
         YSUM = ZERZER
         XPSUM = ZERZER
         YPSUM = ZERZER
         XSUMF = ZERZER
         YSUMF = ZERZER
         XPSUMF = ZERZER
         YPSUMF = ZERZER
*  |  @@@ Reading file line by line                                  @@@
 10      CONTINUE
            READ( LUNRDB, '(A)', ERR=9999, END=20 ) LINE
            IF( LINE(1:1) .EQ. '#' ) GO TO 10
            NIN=NIN+1
            IF( NIN.GT.NINMAX-1 ) 
     +          CALL FLABRT('SOURCE','Increase NINMAX')
*  |  @@@                                                            @@@
*  |  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*  |  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*  |  @@@ CUSTOMIZE TO COMPLY WITH SPECIFIC DATA FORMAT AND UNITS    @@@
*  |  @@@                                                            @@@
*  |  @@@ Following variables must be filled:                        @@@
*  |  @@@                                                            @@@
*  |  @@@   XAUX = x, must be in cm                                  @@@
*  |  @@@   YAUX = y, must be in cm                                  @@@
*  |  @@@   ZAUX = z, must be in cm                                  @@@
*  |  @@@   XPAUX = x', must be in rad                               @@@
*  |  @@@   YPAUX = y', must be in rad                               @@@
*  |  @@@   PBAUX = beam momentum, must be in GeV/c                  @@@
*  |  @@@                                                            @@@
*  |  @@@ Example I (SixTrack format from C. Bracco, injection team):@@@
*  |  @@@                                                            @@@
*  |  @@@   Column 1: x  (in m)                                      @@@
*  |  @@@   Column 2: x' (in rad)                                    @@@
*  |  @@@   Column 3: y  (in m)                                      @@@
*  |  @@@   Column 4: y' (in rad)                                    @@@
*  |  @@@   Column 5: (not used)                                     @@@
*  |  @@@   Column 6: momentum (in MeV)                              @@@
*  |  @@@                                                            @@@
*            READ( LINE,* ) XAUX,XPAUX,YAUX,YPAUX,BLAUX,PBAUX
*            XAUX = XAUX*1.0D+02
*            YAUX = YAUX*1.0D+02
*            ZAUX = ZERZER
*            PBAUX = PBAUX / 1.0D+03
*  |  @@@                                                            @@@
*  |  @@@ Example II (MAD-X format from L. Stoel, extrac. team)      @@@
*  |  @@@                                                            @@@
*  |  @@@   Column 1: particle number                                @@@
*  |  @@@   Column 2: turn                                           @@@
*  |  @@@   Column 3: momentum (GeV/c)                               @@@
*  |  @@@   Column 4: x  (in mm)                                     @@@
*  |  @@@   Column 5: y  (in mm)                                     @@@
*  |  @@@   Column 6: cos_x                                          @@@
*  |  @@@   Column 7: cos_y                                          @@@
*  |  @@@                                                            @@@
            READ( LINE,* ) IPART, JTURN, PBAUX, XAUX, YAUX, XPAUX,
     &                     YPAUX
*  |  @@@                                                            @@@
*  |  @@@ END USER-SPECIFIC CUSTOMIZATION                            @@@
*  |  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*  |  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*  |  @@@                                                            @@@
*  |  @@@ Deriving direction cosines                                 @@@
            ZPAUX = SQRT(ONEONE-XPAUX**2-YPAUX**2)
*  |  @@@ Calculating sum values to obtain mean values of the        @@@
*  |  @@@ partic distribution before applying the transformation     @@@
            XSUM = XSUM + XAUX
            YSUM = YSUM + YAUX
            XPSUM = XPSUM + XPAUX
            YPSUM = YPSUM + YPAUX
*  |  @@@ Inverting x,x',z,z' if BEAMPOS SDUM=NEGATIVE               @@@
            IF ( WBEAM .LT. ZERZER ) THEN
               ZAUX = -ZAUX
               XAUX = -XAUX
               XPAUX = -XPAUX
               ZPAUX = -ZPAUX
            END IF 
*  |  @@@ Performing roto-translation if WHAT(1)>0 and storing       @@@
*  |  @@@ positions and direction cosines in an array                @@@
            NPOINT=1
            IF (WHASOU(1).NE.0)
     &        CALL UNDOTR ( NPOINT, XAUX, YAUX, ZAUX, INT(WHASOU(1)) )
            XIN(NIN) = XAUX
            YIN(NIN) = YAUX
            ZIN(NIN) = ZAUX
            IF (WHASOU(1).NE.0)
     &        CALL UNDRTO ( NPOINT, XPAUX, YPAUX, ZPAUX, INT(WHASOU(1)))
            UIN(NIN) = XPAUX
            VIN(NIN) = YPAUX
            WIN(NIN) = ZPAUX
*  |  @@@ Storing the beam momenta in an array                       @@@
            PBIN(NIN) = PBAUX
*  |  @@@ Storing the particle index and turn in an array            @@@
            IIN(NIN) = IPART * 10 + JTURN
*  |  @@@ Calculating sum values to obtain mean values of the        @@@
*  |  @@@ particle distribution after applying the transformation    @@@
            XSUMF = XSUMF + XAUX
            YSUMF = YSUMF + YAUX
            XPSUMF = XPSUMF + XPAUX
            YPSUMF = YPSUMF + YPAUX
         GO TO 10
 20      CONTINUE
*  |  @@@                                                            @@@
*  |  @@@ I.D. Closing file                                          @@@
*  |  @@@                                                            @@@
         CLOSE( LUNRDB )
         IF ( NIN .LT. 1 ) 
     +       CALL FLABRT('SOURCE','Illegal initialization (3)')
*  |  @@@                                                            @@@
*  |  @@@ I.E. Dumping information about the distribution            @@@
*  |  @@@                                                            @@@
         IF ( LSVERB ) THEN
             WRITE( 84,* ) "# Nmb particles loaded = ", NIN
             WRITE( 84,* ) "# Before transformation:"
             WRITE( 84,* ) "# -- Mean value of X: ",XSUM/NIN
             WRITE( 84,* ) "# -- Mean value of Y: ",YSUM/NIN
             WRITE( 84,* ) "# -- Mean value of X_prime: ",XPSUM/NIN
             WRITE( 84,* ) "# -- Mean value of Y_prime: ",YPSUM/NIN
             WRITE( 84,* ) "# After transformation:"
             WRITE( 84,* ) "# -- Mean value of X: ",XSUMF/NIN
             WRITE( 84,* ) "# -- Mean value of Y: ",YSUMF/NIN
             WRITE( 84,* ) "# -- Mean value of X_prime: ",XPSUMF/NIN
             WRITE( 84,* ) "# -- Mean value of Y_prime: ",YPSUMF/NIN
             WRITE( 84,* ) "# "
             IF ( LFORCE ) THEN
                 WRITE( 84,* ) "# Forcing inelastic nuclear ",
     +             "interaction with FLUKA material:",NINT(WHASOU(2))  
                 IF ( ICOMP(NINT(WHASOU(2))) .GT. 0 ) 
     +              WRITE( 84,* ) "# This material is a compound",
     +               " with ",ICOMPL(NINT(WHASOU(2)))," constituents"  
             ELSE         
                 WRITE( 84,* ) "# Particles loaded as they are, i.e. ",
     +             "no interaction forced"
             END IF
             WRITE( 84,* ) "# "
         END IF
*  |  @@@                                                            @@@
*  |  @@@ I.F. Initialise extraction counters                        @@@
*  |  @@@                                                            @@@
         DO 101 ITURN = 1, NTURN
            NSAMPLED (ITURN) = 0
            NEXTR    (ITURN) = 0
            NEXTR1   (ITURN) = 0
            NCIRC    (ITURN) = 0
            NCIRC1   (ITURN) = 0
 101     CONTINUE
*  |  @@@                                                            @@@
*  |  @@@@@@@@@@@                                            @@@@@@@@@@@
*  |  @@@@@@@@@@@                                            @@@@@@@@@@@
*  |  @@@@@@@@@@@                                            @@@@@@@@@@@
      END IF
*  |
*  +-------------------------------------------------------------------*
*  Push one source particle to the stack. Note that you could as well
*  push many but this way we reserve a maximum amount of space in the
*  stack for the secondaries to be generated
*  |
*  |
*  |  @@@@@@@@@@@                                            @@@@@@@@@@@
*  |  @@@@@@@@@@@                                            @@@@@@@@@@@
*  |  @@@@@@@@@@@                                            @@@@@@@@@@@
*  |  @@@                                                            @@@
*  |  @@@ II. Randomly selecting a particle                          @@@
*  |  @@@                                                            @@@
      RNDSIG1 = FLRNDM (RNDSIG1)
      N = INT(NIN*RNDSIG1)+1
      IF (N.GT.NIN) N=NIN
*  |  @@@                                                            @@@
*  |  @@@ The following line makes the starting region search much more
*  |  @@@  robust if particles are starting very close to a boundary:
      CALL GEOCRS ( UIN(N), VIN(N), WIN(N) )
      CALL GEOREG ( XIN(N), YIN(N), ZIN(N), MREG, IDISC )
*  |  @@@                                                            @@@
      IF ( LSVERB ) THEN
          WRITE( 84, * ) "# List index of randomly selected part.: ", N
          IF ( LFORCE ) THEN
              WRITE( 84,'(A,7(1PE16.8))' ) " # Primary: ",
     +              XIN(N),YIN(N),ZIN(N),UIN(N),VIN(N),WIN(N),PBIN(N)
          END IF         
      END IF
*  |  @@@                                                            @@@
*  |  @@@@@@@@@@@                                            @@@@@@@@@@@
*  |  @@@@@@@@@@@                                            @@@@@@@@@@@
*  |  @@@@@@@@@@@                                            @@@@@@@@@@@
*
*
*  |  @@@@@@@@@@@                                            @@@@@@@@@@@
*  |  @@@@@@@@@@@                                            @@@@@@@@@@@
*  |  @@@@@@@@@@@                                            @@@@@@@@@@@
*  |  @@@                                                            @@@
*  |  @@@ III. Option A (LFORCE .EQ. FALSE): Loading particles as    @@@
*  |  @@@      they are (i.e. forcing no interaction)                @@@
*  |  @@@                                                            @@@
      IF ( .NOT. LFORCE ) THEN
*  |  @@@                                                            @@@
*  |  @@@ Npflka is the stack counter: of course any time source     @@@ 
*  |  @@@ is called itmust be =0                                     @@@
          NPFLKA = NPFLKA + 1
*  |  @@@ Wt is the weight of the particle                           @@@
          WTFLK  (NPFLKA) = ONEONE
          WEIPRI = WEIPRI + WTFLK (NPFLKA)
*  |  @@@ Particle type (1=proton.....). Ijbeam is the type          @@@
*  |  @@@ set by the BEAMcard
*  +-------------------------------------------------------------------*
*  |  @@@                                                            @@@
*  |  @@@ (Radioactive) isotope:                                     @@@
          IF ( IJBEAM .EQ. -2 .AND. LRDBEA ) THEN
             IARES  = IPROA
             IZRES  = IPROZ
             IISRES = IPROM
             CALL STISBM ( IARES, IZRES, IISRES )
             IJHION = IPROZ  * 1000 + IPROA
             IJHION = IJHION * 100 + KXHEAV
             IONID  = IJHION
             CALL DCDION ( IONID )
             CALL SETION ( IONID )
*  |  @@@                                                            @@@
*  +-------------------------------------------------------------------*
*  |  @@@ Heavy ion:                                                 @@@
          ELSE IF ( IJBEAM .EQ. -2 ) THEN
             IJHION = IPROZ  * 1000 + IPROA
             IJHION = IJHION * 100 + KXHEAV
             IONID  = IJHION
             CALL DCDION ( IONID )
             CALL SETION ( IONID )
             ILOFLK (NPFLKA) = IJHION
*  |  @@@ Flag this is prompt radiation                              @@@
             LRADDC (NPFLKA) = .FALSE.
*  |  @@@ Group number for "low" energy neutrons, set to 0 anyway    @@@
             IGROUP (NPFLKA) = 0
*  |  @@@                                                            @@@
*  +-------------------------------------------------------------------*
*  |  @@@ Normal hadron:                                             @@@
          ELSE
             IONID = IJBEAM
             ILOFLK (NPFLKA) = IJBEAM
*  |  @@@ Flag this is prompt radiation                              @@@
             LRADDC (NPFLKA) = .FALSE.
*  |  @@@ Group number for "low" energy neutrons, set to 0 anyway    @@@
             IGROUP (NPFLKA) = 0
          END IF
*  |  @@@                                                            @@@
*  +-------------------------------------------------------------------*
*  |  @@@                                                            @@@
*  |  @@@ From this point .....                                      @@@
*  |  @@@ Particle generation (1 for primaries)                      @@@
          LOFLK  (NPFLKA) = 1
*  |  @@@ User dependent flag:                                       @@@
          LOUSE  (NPFLKA) = 0
*  No channeling:
      LCHFLK (NPFLKA) = .FALSE.
      DCHFLK (NPFLKA) = ZERZER
!->*  |  @@@ No channeling:                                             @@@
!->          KCHFLK (NPFLKA) = 0
!->          ECRFLK (NPFLKA) = ZERZER
!->*  |  @@@ Extra infos:                                               @@@
!->          INFSTK (NPFLKA) = 0
!->          ANFSTK (NPFLKA) = ZERZER
!->*  |  @@@ Parent variables:                                          @@@
!->          IPRSTK (NPFLKA) = 0
!->          EKPSTK (NPFLKA) = ZERZER
*  |  @@@ User dependent spare variables:                            @@@
          DO 100 ISPR = 1, MKBMX1
             SPAREK (ISPR,NPFLKA) = ZERZER
 100      CONTINUE
*  |  @@@ User dependent spare flags:                                @@@
          DO 200 ISPR = 1, MKBMX2
             ISPARK (ISPR,NPFLKA) = 0
 200      CONTINUE
*  |  @@@ Save the track number of the stack particle:               @@@
          ISPARK (MKBMX2,NPFLKA) = NPFLKA
*  |  @@@ Particle numbers reached:                                  @@@
          NPARMA = NPARMA + 1
          NUMPAR (NPFLKA) = NPARMA
*  |  @@@ Number of the event which created the particle             @@@
          NEVENT (NPFLKA) = 0
*  |  @@@ Distance to the nearest boundary                           @@@
          DFNEAR (NPFLKA) = +ZERZER
*  |  @@@ ... to this point: don't change anything                   @@@
*  |  @@@ Save particle number and turn                              @@@
          ISPARK (1,NPFLKA) = IIN(N)
*  |  @@@ Update counter                                             @@@
          ITURN = MOD( IIN(N), 10 )
          NSAMPLED( ITURN ) = NSAMPLED( ITURN ) + 1
*  |  @@@ Particle age (s)                                           @@@
          AGESTK (NPFLKA) = +ZERZER
*  |  @@@ Kshort component of K0/K0bar                               @@@
          AKNSHR (NPFLKA) = -TWOTWO
*  |  @@@ Kinetic energy of the particle (GeV)                       @@@
          TKEFLK (NPFLKA) = SQRT ( PBIN(N)**2 + AM (IONID)**2 ) 
     +                      - AM (IONID)
*  |  @@@ Particle momentum                                          @@@
          PMOFLK (NPFLKA) = PBIN(N)
*     PMOFLK (NPFLKA) = SQRT ( TKEFLK (NPFLKA) * ( TKEFLK (NPFLKA)
*    &                       + TWOTWO * AM (IONID) ) )
*  |  @@@ Cosines (tx,ty,tz)
          TXFLK  (NPFLKA) = UIN(N)
          TYFLK  (NPFLKA) = VIN(N)
          TZFLK  (NPFLKA) = WIN(N)
*         TZFLK  (NPFLKA) = SQRT ( ONEONE - TXFLK (NPFLKA)**2
*    &                       - TYFLK (NPFLKA)**2 )
*  |  @@@ Polarization cosines:
          TXPOL  (NPFLKA) = -TWOTWO
          TYPOL  (NPFLKA) = +ZERZER
          TZPOL  (NPFLKA) = +ZERZER
*  |  @@@ Particle coordinates
          XFLK   (NPFLKA) = XIN(N)
          YFLK   (NPFLKA) = YIN(N)
          ZFLK   (NPFLKA) = ZIN(N)
*  |  @@@ Region (note that region is found by GEOREG call above)    @@@
          NRGFLK (NPFLKA) = MREG
*  |  @@@ Calculate the total kinetic energy of the primaries: don't change
          IF ( ILOFLK (NPFLKA) .EQ. -2 .OR. 
     &                                   ILOFLK (NPFLKA) .GT. 100000 )
     &       THEN
             TKESUM = TKESUM + TKEFLK (NPFLKA) * WTFLK (NPFLKA)
          ELSE IF ( ILOFLK (NPFLKA) .NE. 0 ) THEN
             TKESUM = TKESUM + ( TKEFLK (NPFLKA) 
     &            + AMDISC (ILOFLK(NPFLKA)) )  * WTFLK (NPFLKA)
          ELSE
             TKESUM = TKESUM + TKEFLK (NPFLKA) * WTFLK (NPFLKA)
          END IF
*  |  @@@ Production delay:                                          @@@
          RADDLY (NPFLKA) = ZERZER
*  |  @@@ Lattice                                                    @@@
          CALL GEOHSM ( NHSPNT (NPFLKA), 1, -11, MLATTC )
          NLATTC (NPFLKA) = MLATTC
*  |  @@@ Cumulative path travelled                                  @@@
          CMPATH (NPFLKA) = ZERZER
          CALL SOEVSV
*  |  @@@                                                            @@@
          IF ( LSVERB ) THEN
              WRITE( 84,'(1(I5),8(1PE16.8),I10)' )
     &               ILOFLK(NPFLKA),WTFLK(NPFLKA),TKEFLK(NPFLKA),
     &               XFLK(NPFLKA),YFLK(NPFLKA),ZFLK(NPFLKA),
     &               TXFLK(NPFLKA),TYFLK(NPFLKA),TZFLK(NPFLKA),
     &            ISPARK (1,NPFLKA)
           END IF
*  |  @@@                                                            @@@
*  |  @@@                                                            @@@
*  |  @@@ III. Option B (LFORCE .EQ. TRUE): Forcing an inelastic     @@@
*  |  @@@      interaction with a nucleus of a given species and     @@@
*  |  @@@      loading collision products on stack                   @@@
*  |  @@@                                                            @@@
      ELSE
*  |  @@@ Initializing some variables                                @@@
          EKE = SQRT ( PBIN(N)**2 + AM (IJBEAM)**2 ) - AM (IJBEAM)
          ELKE   = LOG (EKE)
          AUXTXP =-TWOTWO
          AUXTYP = ZERZER
          AUXTZP = ZERZER
          AUXWEE = ONEONE
          AUXBIA = ZERZER
*  |  @@@ Determining if material is a compound and, if yes,         @@@
*  |  @@@ sampling an elemental constituent as collision partner     @@@
          MMAT = INT(WHASOU(2))
          IF ( ICOMP (MMAT) .LE. 0 ) THEN
              MMMAT = MMAT
          ELSE
              TINLEN = ZERZER
              DO 1000 I = ICOMP (MMAT), ICOMP (MMAT) + ICOMPL (MMAT) - 1
                  MMMAT = MATNUM (I)
                  LENOLD = .FALSE.
                  SUMINX (I) = CONTNT (I) * 
     &                   SGTINL ( IJBEAM, EKE, ELKE, MMMAT, LENOLD )
     &                           / RHO (MMMAT)
                  SUMINX (I) = SUMINX (I) + TINLEN
                  TINLEN = SUMINX (I)
 1000         CONTINUE
              RCONT = TINLEN * FLRNDM (RCONT)
              DO 2000 I = ICOMP (MMAT), ICOMP (MMAT) + ICOMPL (MMAT) - 1
                 IF ( RCONT .LE. SUMINX (I) ) GO TO 2500
 2000         CONTINUE
              I = I - 1
 2500         CONTINUE
              MMMAT = MATNUM (I)
              WRITE( 84,* ) "# Material number of randomly sampled",
     &             " elem. constituent (coll. partn.): ",MMMAT
          END IF
*  |  @@@                                                            @@@
          LEVFIN = .FALSE.   
*  |  @@@ Calling event generator                                    @@@
          CALL EVENTX ( 
     &              IJBEAM, PBIN(N), EKE, UIN(N), VIN(N), WIN(N), 
     &              AUXTXP, AUXTYP, AUXTZP, AUXWEE, MMMAT, 
     &              AUXBIA )
*  |  @@@                                                            @@@
          IF ( LSVERB ) THEN
              WRITE ( 84,*) "# Particles in stack: ",NP
          END IF
*  |  @@@ Updating total weight of primaries                         @@@
          WEIPRI = WEIPRI + AUXWEE
*  |  @@@ Setting stack pointer to zero                              @@@
          NPFLKA = 0
*  |  @@@                                                            @@@
*  |  @@@ Loading products on stack                                  @@@
          DO 4000 KP = 1, NP
*  |  @@@ Fluka stack pointer                                        @@@
              NPFLKA = NPFLKA + 1
*  |  @@@ Weight of the particle                                     @@@
              WTFLK  (NPFLKA) = WEI   (KP)       
*  |  @@@ Particle identity                                          @@@
              ILOFLK (NPFLKA) = KPART (KP)
*  |  @@@ Flag this is prompt radiation                              @@@   
              LRADDC (NPFLKA) = .FALSE.
*  |  @@@ Group number for "low" energy neutrons, set to 0 anyway    @@@                  
              IGROUP (NPFLKA) = 0
*  |  @@@                                                            @@@      
c$$$*  Particle type (1=proton.....). Ijbeam is the type set by the BEAM
c$$$*  card
c$$$*  +-------------------------------------------------------------------*
c$$$*  |  (Radioactive) isotope:
c$$$      IF ( IJBEAM .EQ. -2 .AND. LRDBEA ) THEN
c$$$         IARES  = IPROA
c$$$         IZRES  = IPROZ
c$$$         IISRES = IPROM
c$$$         CALL STISBM ( IARES, IZRES, IISRES )
c$$$         IJHION = IPROZ  * 1000 + IPROA
c$$$         IJHION = IJHION * 100 + KXHEAV
c$$$         IONID  = IJHION
c$$$         CALL DCDION ( IONID )
c$$$         CALL SETION ( IONID )
c$$$*  |
c$$$*  +-------------------------------------------------------------------*
c$$$*  |  Heavy ion:
c$$$      ELSE IF ( IJBEAM .EQ. -2 ) THEN
c$$$         IJHION = IPROZ  * 1000 + IPROA
c$$$         IJHION = IJHION * 100 + KXHEAV
c$$$         IONID  = IJHION
c$$$         CALL DCDION ( IONID )
c$$$         CALL SETION ( IONID )
c$$$         ILOFLK (NPFLKA) = IJHION
c$$$*  |  Flag this is prompt radiation
c$$$         LRADDC (NPFLKA) = .FALSE.
c$$$*  |  Group number for "low" energy neutrons, set to 0 anyway
c$$$         IGROUP (NPFLKA) = 0
c$$$*  |
c$$$*  +-------------------------------------------------------------------*
c$$$*  |  Normal hadron:
c$$$      ELSE
c$$$         IONID = IJBEAM
c$$$         ILOFLK (NPFLKA) = IJBEAM
c$$$*  |  Flag this is prompt radiation
c$$$         LRADDC (NPFLKA) = .FALSE.
c$$$*  |  Group number for "low" energy neutrons, set to 0 anyway
c$$$         IGROUP (NPFLKA) = 0
c$$$      END IF
c$$$*  |
c$$$*  +-------------------------------------------------------------------*
*  |  @@@                                                            @@@      
*  |  @@@ From this point .....                                      @@@ 
*  |  @@@ Particle generation (1 for primaries)                      @@@ 
              LOFLK  (NPFLKA) = 1
*  |  @@@ User dependent flag:                                       @@@
              LOUSE  (NPFLKA) = 0
*  No channeling:
      LCHFLK (NPFLKA) = .FALSE.
      DCHFLK (NPFLKA) = ZERZER
!->*  |  @@@ No channeling:                                             @@@
!->              KCHFLK (NPFLKA) = 0
!->              ECRFLK (NPFLKA) = ZERZER
!->*  |  @@@ Extra infos:                                               @@@            
!->              INFSTK (NPFLKA) = 0
!->              ANFSTK (NPFLKA) = ZERZER
!->*  |  @@@ Parent variables:                                          @@@
!->              IPRSTK (NPFLKA) = 0
!->              EKPSTK (NPFLKA) = ZERZER
*  |  @@@ User dependent spare variables:                            @@@
              DO 3600 ISPR = 1, MKBMX1
                  SPAREK (ISPR,NPFLKA) = ZERZER
 3600         CONTINUE
*  |  @@@ User dependent spare flags:                                @@@
              DO 3800 ISPR = 1, MKBMX2
                  ISPARK (ISPR,NPFLKA) = 0
 3800         CONTINUE
*  |  @@@ Save the track number of the stack particle:               @@@
              ISPARK (MKBMX2,NPFLKA) = NPFLKA
*  |  @@@ Particle numbers reached:                                  @@@
              NPARMA = NPARMA + 1
              NUMPAR (NPFLKA) = NPARMA
*  |  @@@ Number of the event which created the particle             @@@
              NEVENT (NPFLKA) = 0
*  |  @@@ Distance to the nearest boundary                           @@@
              DFNEAR (NPFLKA) = +ZERZER
*  |  @@@ ... to this point: don't change anything                   @@@
*  |  @@@ Particle age (s)                                           @@@
              AGESTK (NPFLKA) = +ZERZER
*  |  @@@ Kshort component of K0/K0bar                               @@@
              AKNSHR (NPFLKA) = -TWOTWO
*  |  @@@ Kinetic energy of the particle (GeV)                       @@@
              TKEFLK (NPFLKA) = TKI (KP)
*  |  @@@ Particle momentum                                          @@@
              PMOFLK (NPFLKA) = PLR (KP)
*  |  @@@ Cosines (tx,ty,tz)                                         @@@
              TXFLK  (NPFLKA) = CXR (KP)
              TYFLK  (NPFLKA) = CYR (KP)
              TZFLK  (NPFLKA) = CZR (KP)
*  |  @@@ Polarization cosines:                                      @@@
              TXPOL  (NPFLKA) = CXRPOL (KP)
              TYPOL  (NPFLKA) = CYRPOL (KP)
              TZPOL  (NPFLKA) = CZRPOL (KP)
*  |  @@@ Why is the following necessary?                            @@@
              CXRPOL (KP) = - TWOTWO
              CYRPOL (KP) = + ZERZER
              CZRPOL (KP) = + ZERZER
*  |  @@@ Particle coordinates                                       @@@
              XFLK   (NPFLKA) = XIN(N)
              YFLK   (NPFLKA) = YIN(N)
              ZFLK   (NPFLKA) = ZIN(N)
*  |  @@@ Region (note that region is found by GEOREG call above)    @@@
              NRGFLK (NPFLKA) = MREG
*  |  @@@ Calculate the total kinetic energy of the primaries        @@@
              IF ( ILOFLK (NPFLKA) .EQ. -2 .OR. 
     &             ILOFLK (NPFLKA) .GT. 100000 ) THEN
                 TKESUM = TKESUM + TKEFLK (NPFLKA) * WTFLK (NPFLKA)
              ELSE IF ( ILOFLK (NPFLKA) .NE. 0 ) THEN
                 TKESUM = TKESUM + ( TKEFLK (NPFLKA) + 
     &           AMDISC (ILOFLK(NPFLKA)) ) * WTFLK (NPFLKA)
              ELSE
                 TKESUM = TKESUM + TKEFLK (NPFLKA) * WTFLK (NPFLKA)
              END IF
*  |  @@@ Production delay:                                          @@@
              RADDLY (NPFLKA) = ZERZER
*  |  @@@ Do not change these cards:                                 @@@
*  |  @@@ Lattice                                                    @@@
              CALL GEOHSM ( NHSPNT (NPFLKA), 1, -11, MLATTC )
              NLATTC (NPFLKA) = MLATTC
*  |  @@@ Cumulative path travelled                                  @@@
              CMPATH (NPFLKA) = ZERZER
*      CALL SOEVSV
*  |  @@@                                                            @@@
              IF ( LSVERB ) THEN
                  WRITE( 84,'(1(I5),8(1PE16.8))' ) 
     &                   ILOFLK(NPFLKA),WTFLK(NPFLKA),TKEFLK(NPFLKA),
     &                   XFLK(NPFLKA),YFLK(NPFLKA),ZFLK(NPFLKA),
     &                   TXFLK(NPFLKA),TYFLK(NPFLKA),TZFLK(NPFLKA)
              END IF
 4000     CONTINUE
*  |  @@@                                                            @@@
          NP  = 0
          NP0 = 0
*  |  @@@                                                            @@@
*  |  @@@ If "Heavy" transport requested:                            @@@
          IF ( LHEAVY ) THEN
             DO 5000 KP = 1, NPHEAV
*  |  @@@ Fluka stack pointer                                        @@@
                NPFLKA = NPFLKA + 1
*  |  @@@ Weight of the particle                                     @@@
                WTFLK  (NPFLKA) = WHEAVY (KP)
*  |  @@@ Particle identity                                          @@@
                ILOFLK (NPFLKA) =-KHEAVY (KP)
*  |  @@@ Flag this is prompt radiation                              @@@   
                LRADDC (NPFLKA) = .FALSE.
*  |  @@@ Group number for "low" energy neutrons, set to 0 anyway    @@@                  
                IGROUP (NPFLKA) = 0
*  |  @@@ Particle generation (1 for primaries)                      @@@ 
                LOFLK  (NPFLKA) = 1
*  |  @@@ User dependent flag:                                       @@@
                LOUSE  (NPFLKA) = 0
*  No channeling:
                LCHFLK (NPFLKA) = .FALSE.
                DCHFLK (NPFLKA) = ZERZER
!->*  |  @@@ No channeling:                                             @@@
!->                KCHFLK (NPFLKA) = 0
!->                ECRFLK (NPFLKA) = ZERZER
!->*  |  @@@ Extra infos:                                               @@@            
!->                INFSTK (NPFLKA) = 0
!->                ANFSTK (NPFLKA) = ZERZER
*  |  @@@ User dependent spare variables:                            @@@
                DO 4600 ISPR = 1, MKBMX1
                   SPAREK (ISPR,NPFLKA) = ZERZER
 4600           CONTINUE
*  |  @@@ User dependent spare flags:                                @@@
                DO 4800 ISPR = 1, MKBMX2
                   ISPARK (ISPR,NPFLKA) = 0
 4800           CONTINUE
*  |  @@@ Save the track number of the stack particle:               @@@
                ISPARK (MKBMX2,NPFLKA) = NPFLKA
*  |  @@@ Particle numbers reached:                                  @@@
                NPARMA          = NPARMA + 1
                NUMPAR (NPFLKA) = NPARMA
*  |  @@@ Number of the event which created the particle             @@@
                NEVENT (NPFLKA) = 0
*  |  @@@ Distance to the nearest boundary                           @@@
                DFNEAR (NPFLKA) = +ZERZER
*  |  @@@ Particle age (s)                                           @@@
                AGESTK (NPFLKA) = +ZERZER
*  |  @@@ Kshort component of K0/K0bar                               @@@
                AKNSHR (NPFLKA) = -TWOTWO
*  |  @@@ Kinetic energy of the particle (GeV)                       @@@
                TKEFLK (NPFLKA) = TKHEAV (KP)
*  |  @@@ Particle momentum                                          @@@
                PMOFLK (NPFLKA) = PHEAVY (KP)
*  |  @@@ Cosines (tx,ty,tz)                                         @@@
                TXFLK  (NPFLKA) = CXR (KP)
                TYFLK  (NPFLKA) = CYR (KP)
                TZFLK  (NPFLKA) = CZR (KP)
*  |  @@@ Polarization cosines:                                      @@@
                TXPOL  (NPFLKA) = -TWOTWO
                TYPOL  (NPFLKA) = +ZERZER
                TZPOL  (NPFLKA) = +ZERZER
*  |  @@@ Particle coordinates                                       @@@
                XFLK   (NPFLKA) = XIN(N)
                YFLK   (NPFLKA) = YIN(N)
                ZFLK   (NPFLKA) = ZIN(N)
*  |  @@@ Region (note that region is found by GEOREG call above)    @@@
                NRGFLK (NPFLKA) = MREG
                CMPATH (NPFLKA) = ZERZER
*  |  @@@ Calculate the total kinetic energy of the primaries        @@@
                TKESUM = TKESUM + TKEFLK (NPFLKA) * WTFLK (NPFLKA)
*  |  @@@ Production delay:                                          @@@
                RADDLY (NPFLKA) = ZERZER
*  |  @@@ Lattice                                                    @@@
                CALL GEOHSM ( NHSPNT (NPFLKA), 1, -11, MLATTC )
                NLATTC (NPFLKA) = MLATTC
*  |  @@@ Cumulative path travelled                                  @@@
                CMPATH (NPFLKA) = ZERZER
*  |  @@@                                                            @@@
                IF ( LSVERB ) THEN
                    WRITE( 84,'(1(I5),8(1PE16.8))' ) 
     &                     ILOFLK(NPFLKA),WTFLK(NPFLKA),TKEFLK(NPFLKA),
     &                     XFLK(NPFLKA),YFLK(NPFLKA),ZFLK(NPFLKA),
     &                     TXFLK(NPFLKA),TYFLK(NPFLKA),TZFLK(NPFLKA)
                END IF
 5000        CONTINUE
             TVHEAV = ZERZER
             NPHEAV = 0
          END IF
*  |  @@@                                                            @@@
      END IF
*  |  @@@                                                            @@@
*  |  @@@@@@@@@@@                                            @@@@@@@@@@@
*  |  @@@@@@@@@@@                                            @@@@@@@@@@@
*  |  @@@@@@@@@@@                                            @@@@@@@@@@@
*  |  
*  +-------------------------------------------------------------------*
      RETURN
 9999 CONTINUE
      STOP "SOURCE: Error reading file"
*=== End of subroutine Source =========================================*
      END
